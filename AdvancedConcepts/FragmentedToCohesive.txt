Example of code that initially has fragmented logic, and then refactoring it into a more cohesive and readable form.

Let's start by creating a Dart program with the mentioned symptoms: long, repeated argument lists, 
repeated code, especially repeated conditionals, poor naming of helper routines, and shared mutable 
data structures. We'll then refactor it to improve readability and understanding.  
  
void main() {
  var data = {'name': 'Alice', 'age': 30, 'location': 'Wonderland'};
  printUserInfo(data['name'], data['age'], data['location']);
  printUserInfo(data['name'], data['age'], data['location']);
}

void printUserInfo(String? name, int? age, String? location) {
  if (name != null && age != null && location != null) {
    print('Name: $name, Age: $age, Location: $location');
  } else {
    print('Incomplete user info.');
  }
}

=====================================================================

Refactored Code
Now, let's refactor this code. We'll address the long argument lists by 
using a class, reduce repeated code, improve naming, and handle the data structure more efficiently.
  
class User {
  String name;
  int age;
  String location;

  User(this.name, this.age, this.location);

  void printInfo() {
    print('Name: $name, Age: $age, Location: $location');
  }
}

void main() {
  var alice = User('Alice', 30, 'Wonderland');
  alice.printInfo();
}

Explanation
Class User: We encapsulate the user data in a User class. This addresses the long, repeated argument list and shared mutable data structure issues.
Method printInfo: This method is part of the User class, making the logic more cohesive and eliminating the need for repeated argument passing.
Improved Readability: By using a class, we make the code more readable and the data structure clearer, aligning with the principle of understanding code in small, manageable pieces.

This refactoring demonstrates how to transition from a fragmented and less readable state to a more organized and understandable code structure in Dart, following the principles you described.
